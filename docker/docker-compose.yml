version: '3.7'

services:

    php7-fpm:
        build:
            # usa el dockerfile del context para crear la imagen ferdockerizing/php:0.1 si Ã©sta no existiese
            context: ./php7-fpm
        container_name: php7-fpm
        image: ferdockerizing/php-alpine:0.1
        restart: always
        volumes:
            # - ../:/usr/share/nginx/html # Not working (must be full path for mapping)
            - /home/docker/projects/5_lumen_restfullAPIs:/usr/share/nginx/html
        networks:
            - frontEnd-network
            - backEnd-network
        links:
            # - mysql
            - postgresql

    nginx:
        build:
            context: ./nginx
        container_name: nginx
        env_file: .env
        image: ferdockerizing/nginx-alpine:0.1
        # image: ferdockerizing/nginx-debian:0.1
        volumes:
            # - ../:/usr/share/nginx/html
            - /home/docker/projects/5_lumen_restfullAPIs:/usr/share/nginx/html
        ports:
            - 8900:${PORT}
            - 443:${HTTPS_PORT}
        networks:
            - backEnd-network
        links:
            - php7-fpm

    # mysql:
    #     build:
    #         context: ./mysql
    #     container_name: mysql
    #     image: ferdockerizing/mysql-alpine:0.1
    #     # image: ferdockerizing/mysql-debian:0.1
    #     environment:
    #         - MYSQL_DATABASE=${MYSQL_DATABASE}
    #         - MYSQL_USER=${MYSQL_USER}
    #         - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    #         - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    #     volumes:
    #         # - ./mysql/database:/var/lib/mysql
    #         - /home/docker/lumen_restful_api/docker/mysql/database:/var/lib/mysql
    #     ports:
    #         - ${MYSQL_PORT}:3306
    #     networks:
    #         - backEnd-network

    postgresql:
        build:
            context: ./postgresql
        container_name: postgresql
        image: ferdockerizing/postgresql-alpine:0.1
        environment:
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_SCHEMA=${POSTGRES_SCHEMA}
        volumes:
            - pgdata:/var/lib/postgresql/data
        ports:
            - ${POSTGRES_PORT}:5432
        networks:
            - backEnd-network

networks:
    frontEnd-network:
        name: frontEnd # available with docker-compose 1.18, using the new "name" parameter to networks
        driver: bridge
    backEnd-network:
        name: backEnd # available with docker-compose 1.18, using the new "name" parameter to networks
        driver: bridge

volumes:
    pgdata:
        name: "pgdata"
        external: false # docker-compose up creates it, if it not exists.

